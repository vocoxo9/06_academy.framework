<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
<!-- * namespace 속성 : 현재 mapper 파일의 고유한 별칭을 설정함 -->
	<!-- 
		DML(insert, update, delete) 작성
		<insert|update|delete id="sql문 식별자"
							[parameterType="전달받을 데이터타입(전체클래스명|별칭)"]>
			실행할 SQL문
		</insert|update|delete>
	 -->
	 <!-- <insert id="insertMember" parameterType="com.kh.mybatis.member.model.vo.Member"></insert>  -->
	 <insert id="insertMember" parameterType="Member">
	 	INSERT INTO MEMBER(USER_NO, USER_ID, USER_PWD, USER_NAME, EMAIL, BIRTHDAY, GENDER, PHONE, ADDRESS) 
	 				VALUES(SEQ_UNO.NEXTVAL, #{userId}, #{userPwd}, #{userName}, #{email}, #{birthday}, #{gender}, #{phone}, #{address})
	 </insert>
	 
	 <update id="updateMember" parameterType="Member">
	 	UPDATE MEMBER 
		SET EMAIL = #{email}, GENDER = #{gender}, PHONE = #{phone}, ADDRESS = #{address},  MODIFY_DATE = SYSDATE
		WHERE USER_ID = #{userId}
		AND STATUS ='Y'
	 </update>
	 
	 <update id="deleteMember" >
	 	UPDATE MEMBER
		SET STATUS = 'N', MODIFY_DATE = SYSDATE
		WHERE USER_ID = #{userId} AND USER_PWD = #{userPwd}
	 </update>
	 
	 <update id="updatePassword" parameterType="HashMap">
	 	UPDATE MEMBER
	 	SET USER_PWD = #{ newPwd }, MODIFY_DATE = SYSDATE
	 	WHERE USER_ID = #{ userId } AND USER_PWD = #{ userPwd } AND STATUS = 'Y'
	 </update>
	 
	 
	 
	 <!-- 
	 	resultMap : mybatis의 핵심 기능 중 하나
	 				ResultSet으로부터 조회된 컬럼값을 하나씩 뽑아서
	 				지정한 vo/dto 객체의 각 필드에 저장
	 				코드를 줄여주는 역할
	 <resultMap id="식별자" type="조회 결과를 담아 반환하고자 하는 객체의 타입(전체클래스명|별칭)">
	 	<result column="조회된 컬럼명" property="객체의 필드명" />
	 	<result column="조회된 컬럼명" property="객체의 필드명" />
	 	<result column="조회된 컬럼명" property="객체의 필드명" />
	 </resultMap>
	 
	 => 컬럼명 : 대소문자 구분 x, 필드명 : 대소문자 구분o
	 -->
	 <resultMap id="memberResultMap" type="Member">	
	 	<result column="user_id" property="userId" />
	 	<result column="user_pwd" property="userPwd" />
	 	<result column="user_name" property="userName" />
	 	<result column="email" property="email" />
	 	<result column="birthday" property="birthday" />
	 	<result column="gender" property="gender" />
	 	<result column="phone" property="phone" />
	 	<result column="address" property="address" />
	 </resultMap>


	 <!-- 
	 	DQL(select)
	 	
	 	<select id="쿼리문에 대한 식별자(별칭)" 
	 			resultMap="조회된 결과를 매핑할 resultMap의 id 값"
	 			또는 resultType="조회된 결과를 반환하고자 하는 타입"
	 			[parameterType="쿼리문이 전달받을 데이터타입(전체클래스명|별칭)"]>
	 			
	 		실행 SQL문
	 			
	 	</select>
	  -->
	 <select id="selectMember" resultMap="memberResultMap" parameterType="Member">
	 	SELECT USER_ID, USER_PWD, USER_NAME, EMAIL,
	 		TO_CHAR(TO_DATE(BIRTHDAY, 'RR-MM-DD'), 'YYYY-MM-DD') BIRTHDAY,
	 		GENDER, PHONE, ADDRESS
	 	FROM MEMBER 
	 	WHERE USER_ID = #{userId} AND USER_PWD = #{userPwd} AND STATUS = 'Y'
	 </select>
	 
	 <select id="countMemberByUserId" resultType="_int">
	 	SELECT COUNT(*) FROM MEMBER WHERE USER_ID = #{userId} AND STATUS = 'Y'
	 </select>
	 
	 <select id="boardList" parameterType="Board">
	 	SELECT * FROM BOARD;
	 </select>
</mapper>